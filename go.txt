go语法
fmt是Go语言的标准库，去GOROOT下去加载该模块
相对路径     import   "./model"  　　　　　
//当前文件同一目录的model目录，但是不建议这种方式import
绝对路径     import   "shorturl/model"  　　  
//加载GOPATH/src/shorturl/model模块
	  
程序的初始化和执行都起始于 main package 包，并且 main函数只能在 main 包中，一个项目里也只能有一个 main package。
一个 go 程序文件中可以有一个 init()，一个项目中可以有 n 个 init() 函数。

1、变量声明
用var关键字声明
变量类型位于变量名称的后面---显式声明

用:=赋值
num := 3 等同于 var num int = 3---隐式
_  赋给这个标识符的值都将被抛弃



2、常量声明
定义的时候必须赋值
iota：go语言的常量计数器，只能在常量的表达式中使用，在const关键字出现时将被重置为0。const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)



3、基本数据类型
bool
数值--int、int8、int16、int32、int64     常用int(int64)
    --uint、uint8、uint16、uint32、uint64
浮点数--float32、float64
复数(虚数和实数)--complex32、complex64
byte 类似uint8
rune 类似int32
uint 32位或64位
uintptr 无符号整型，用于存放一个指针

字符串string
单引号只能单个数字、字母、或字符，对应ASCII值
双引号识别有转义字符，如\n、\r等
反引号不识别，会直接打印出来

两种字符串声明方式
str1 := "str1"
str2 := `str2`



4、slice切片(“动态数组”)
make([ ]Type, length, capacity) 长度为切片的容量 capacity
make([ ]Type, length) 长度为切片的长度 length

make函数是Go的内置函数，它的作用是为slice、map或chan初始化并返回引用



5、map
var m map[string]string //map声明,key、value可以接任何类型
m = map[string]string{}

m1 := map[string]string{}

m2 := make(map[string]string)

m3 := map[int]interface{}{} //可以接任意类型



5、err等于nil说明运行正常没有错误
nil的意思是无，或者是零值
可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断
if err := Connect(); err != nil {
    fmt.Println(err)
    return
}



6、GORM-对象关系映射框架
code-gorm



7、新项目下载依赖
go mod tidy
go mod init 文件名



8、
Transaction start a transaction as a block, return error will rollback, otherwise to commit
gorm的DB提供了Transaction方法，相当于一个事务模板，自动commit或者rollback，它提供了func(tx *gorm.DB) error参数用于自定义事务内的数据库操作。

相关知识
https://learnku.com/articles/63555   go swagger用法



#9、排查CPU占用过高问题
go性能分析开启pprof
在yaml里添加debug，把open-pprof修改为true
debug:
  open-pprof: true
http://10.25.10.120:3333/debug/pprof/ 网页版
yum install graphviz安装# for centos
go tool pprof http://10.25.10.120:3333/debug/pprof/profile?seconds=60 生成gz文件
进入pprof
top
traces   runtime.gcBgMarkWorker 函数   golang 垃圾回收
go tool pprof -http 10.25.10.120:8089 /root/pprof/pprof.audit-server.samples.cpu.006.pb.gz 生成web网页，火焰图
每个方块代表一个函数，它下面一层表示这个函数会调用哪些函数，方块的大小代表了使用 CPU 所占百分比

pdf  生成pdf文件
find / -name profile001.pdf 全局查文件
ps查进程

go tool pprof -http 10.25.10.134:8081 /root/pprof/pprof.audit-server.samples.cpu.002.pb.gz



10、vscode配置go远程一键启动
{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch Package",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "/home/fjj/audit/server/main.go"
        }
    ]
} 



11、链接2022
go swagger 使用 https://learnku.com/articles/63555
Go开发环境搭建(VScode) https://www.cnblogs.com/itshare/p/12679529.html
Go语言入门教程 http://c.biancheng.net/golang/
go基础语法 https://blog.csdn.net/sfklyqh/category_11608230.html
Go语言-func 函数定义 https://blog.csdn.net/xyz/article/details/120027722
GO面试汇总 https://www.kancloud.cn/qq5202056/gomianshi/2657166
MySQL-使用自增ID无法插入ID为0值 https://www.dandelioncloud.cn/article/details/1493743240443666433

Redis工具使用教程  https://www.cnblogs.com/qingmuchuanqi48/p/11966568.html
RESTful风格  https://www.cnblogs.com/aaaazzzz/p/13357601.html
yaml文件的属性赋值  https://blog.csdn.net/m0_38057941/article/details/116275039




#12、修改数据库用户权限
mysql -uroot -proot
show databases;
use mysql
-- 查看数据库中的用户权限表
select User,authentication_string,Host from user;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;




13、gorm删除
软删和硬删和表结构有关系，如果deleted_at字段设置为时间即可,gorm 默认就是软删



14、mysql查询字符串包含字段FIND_IN_SET(字段,string)
SELECT count(*) FROM `security_policy_manager` WHERE FIND_IN_SET('HTTP',app_predefined)



15、gorm save
更新的save最后执行的是insert操作，没有id
UPDATE `policy_keyword_detection` SET `name`='1112',`type`='member,pattern',`keyword_list`='member:221,pattern:331' WHERE `id` = 43



16、omitempty
omitempty是省略的意思
json中字段若有omitempty标记，则这个字段为空时，json序列化为string时不会包含该字段
json中字段若没有omitempty标记，则这个字段为空时，json序列化为string时会包含该字段



#17、修改mysql配置
mysql -uroot -p
select @@sql_mode;



18、运行shell脚本
chmod u+x ./sh
./sh



#19、jetbrains账号
账户：1067023515@qq.com
密码：19940215Yvon

github账号
yvonne2345
19940215Yvonne
https://github.com/yvonne2345/practice



#20、修改数据库配置
show variables like '%max_allowed_packet%';

vim /etc/mysql/my.cnf
[mysqld]
socket=/var/lib/mysql/mysql.sock
secure_file_priv=''
max_allowed_packet =99999744

systemctl restart mysql



21、命令行提交代码
git status
git add .
git commit -m"入侵性能"
git pull
git push



22、ide快捷键
ctrl+Y可以删除一行长sql



#23、mysql函数
-- mysql function
drop FUNCTION if exists getTimePoint;
drop FUNCTION if exists isTrue;
DELIMITER //
CREATE DEFINER=`root`@`%` FUNCTION `getTimePoint`(time datetime, startTime datetime, gap int) RETURNS datetime
    NO SQL
BEGIN

RETURN from_unixtime(UNIX_TIMESTAMP(startTime) + ((UNIX_TIMESTAMP(time) - UNIX_TIMESTAMP(startTime)) div gap) * gap);
END
//



DELIMITER //
CREATE DEFINER=`root`@`%` FUNCTION `isTrue`(val int, target int) RETURNS int(11)
    NO SQL
BEGIN
	if (val = target) then
       return 1;
   end if;
RETURN 0;
END
//

24、ln -s aa(源) aa_link(当前)

cp 源文件 目的路径/源文件   拷贝


25、rpc
https://www.lsdcloud.com/go/middleware/go-build.html#_1-%E4%BD%BF%E7%94%A8
https://www.twle.cn/t/19197
https://darjun.github.io/2020/05/08/godailylib/rpc/
rpc实例 https://haisum.github.io/2015/10/13/rpc-jsonrpc-gorilla-example-in-golang/

26、链接2023
go实例 https://geek-docs.com/go-tutorials/go-examples/t_how-to-detect-the-content-type-of-a-file-in-golang.html
https://chai2010.cn/advanced-go-programming-book/ch4-rpc/ch4-01-rpc-intro.html
https://blog.csdn.net/wohu1104/article/details/106295007?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-106295007-blog-83374131.235^v38^pc_relevant_sort&spm=1001.2101.3001.4242.4&utm_relevant_index=8



#27、git命令
git reflog show fjj-develop  git查看分支从那个分支拉取的，先切到该分支

创建merge后回退(有多次提交，如提了三次想回到第二次)
git reset --hard +第二次的commitId  本地代码回到第二次提交后，第三次修改前
git push origin fjj -f  把分支代码push，-f强制推


创建merge后回退(有多次提交，如提了三次想回到第二次)
git reset --hard +第二次的commitId  本地代码回到第二次提交后，第三次修改前
git push origin fjj -f  把分支代码push，-f强制推
git reset --soft HEAD^ 代码回到本地，不会丢
git reset --hard代码会丢


28、vscode
免输入密码登录vscode
ssh-copy-id root@10.25.10.123

免输入密码登录vscode
ssh-copy-id root@10.25.10.130

vscode和服务器无法建立连接(电脑本地)，ssh-keygen -R ip  

ubuntu安装go环境
vscode连远程
vscode启动go项目冲突，vscode自身setting文件被修改，优先读取本地配置文件



29、int类型如果在内存中占用了4个字节，就是32位，2的31次方


30、nft知识:
nft list chain ip netvine-count-table flow-detection-chain -a 获取指定链，流量监测  -a查句柄号，handle号

nft add rule ip netvine-count-table flow-detection-chain ip saddr 192.168.111.111 ip daddr 192.168.111.111 tcp dport 502 meta hour "00:00"-"14:01" meta day { "Monday", "Tuesday" } counter packets 0 bytes 0  添加

nft replace rule ip netvine-count-table flow-detection-chain handle 10 ip saddr 192.168.111.111 ip daddr 192.168.111.111 tcp dport 502 meta hour "00:00"-"14:01" meta day { "Monday", "Tuesday" } counter packets 0 bytes 0  替换/修改

nft delete rule ip netvine-if-table base-rule-chain handle 3 删除

id会被转成16进制，表字段添加

添加之后再次-a输出打印，获取句柄，存到库里/缓存，后面直接用

commandAft := exec.Command("nft", "list", "ruleset")
outAft, _ := commandAft.Output()
global.NETVINE_LOG.Info("nftTables初始化后：" + string(outAft))


ip saddr 1.1.1.1 ip daddr 1.1.1.1 tcp dport 502 meta time "2023-11-15 00:00:00"-"2023-11-16 00:00:00" counter packets 0 bytes 220 meta mark set 0x05f5f465

nft replace rule ip netvine-count-table flow-detection-chain handle 7 ip saddr 192.168.111.111 ip daddr 192.168.111.111 tcp dport 502 meta hour "00:00"-"14:01" meta day { "Monday", "Tuesday" } counter packets 0 bytes 0  替换/修改


nft replace rule netdev netdev-netvine-table flow-detection-chain-enp6s0 handle 25 counter packets 0 bytes 0

nft replace rule ip netvine-count-table flow-detection-chain handle 7 ip saddr 192.168.111.111 ip daddr 192.168.111.111 tcp dport 502 meta hour "00:00"-"14:01" meta day { "Monday", "Tuesday" } counter packets 0 bytes 0



nft replace rule netdev netdev-netvine-table flow-detection-chain-enp6s0 handle 25 counter packets 0 bytes 0


31、go
var x int = 2 and x := 2 这两种声明变量的区别
结果上来说是相等的，但 x := 2  只能在函数体类声明



32、scp传文件
scp -r virus-api/ root@10.25.30.126:/opt 文件夹，递归，-r
在本地或者其他环境远程另一个，比如在123上连126
ssh root@10.25.30.126


服务器执行shell脚本
chmod u+x truncate.sh给脚本加权限
./truncate.sh


33、gpt
https://guan.chat779.com/#/home


34、终端查redis值：
redis-cli
auth Netvine123#@!
hget setting:login lockNum
hset setting:login lockNum 5


swag init --parseDependency=true --parseInternal=true



35、总结性链接
mysql:
https://www.lsdcloud.com/go/middleware/gorm.html#_1-%E5%AE%89%E8%A3%85
https://gorm.io/zh_CN/













36、其他
申请书
机械
http://www.cmpedu.com/books/apply.htm
教育账号18916972239  密码Shua123
Docker容器管理与应用项目教程
Python语言基础(朱晓龙)
C语言程序设计教程 第4版


人邮
https://www.ryjiaoyu.com/
人邮教育账号18916972239 密码caoshua1322
数据库原理与MySQL应用（微课版）
网络安全技术与应用
Go语言开发实战（慕课版）


Java程序设计开发实战（视频讲解版）
路由交换技术
网络互联技术任务驱动式教程（微课版）
局域网组网技术项目式教程（微课版）  14页




redis
go build等命令
rpc
go语法
