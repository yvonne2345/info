2020年10月22日 10:43
1、什么是oss？简单介绍一下OSS？
2、静态变量与常量的区别
1、static和const在编译时直接分配内存。
区别：
1、（本质）static是类型引用，const是实例引用。
2、（初始化）静态变量的初始值必须是一个常量。静态初始值默认为0，而常量也默认为0；
3（赋值）静态变量的值在运行时可以更改赋值，而常量的值是不可改变的，运行一开始已
经固定，之后修改会报错。
4、（内存）静态变量存放在全局数据区中，伴随着这个程序流程，能将此变量的值保留到
下次调用，不过数据过大的静态变量有可能造成内存泄露。而const常量算是一个普通的
只读变量，随函数结束而结束。在C里，const常量总是会分配内存，位于只读数据段。在
C++，如果const常量在没有声明为extern，那么就是一个编译时的符号，不占用内存。
3、什么是容器？介绍一下list、set以及实现类和底层原理？
4、Redis、mq的使用场景，你在实际开发中是如何使用的？
5、如何防止消息重复发送？
6、如果用户第一次发送没有收到验证码，第二次又重复发送，收到的会是什么？如何解决
这样的问题？
可以将验证码和标记状态放入一个对象中，再存入redis中；以手机号为key；
7、什么是红黑树、什么是二叉树，简单介绍一下区别？
红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超
过二者中较低那个的一倍。具体来说，红黑树是满足如下条件的二叉查找树（binarysearch
tree）：
每个节点要么是红色，要么是黑色。
根节点必须是黑色
红色节点不能连续（也即是，红色节点的孩子和父亲都不能是红色）。
对于每个节点，从该点至null（树尾端）的任何路径，都含有相同个数的黑色节点。
在树的结构发生改变时（插入或者删除操作），往往会破坏上述条件3或条件4，需要通过
调整使得查找树重新满足红黑树的条件。
8、简述一下Springboot常用注解？是有用过一些校验注解？
9、aop的使用场景及底层原理？你如何实现aop做日志记录？
10、redis缓存如何清除，以及如何设置redis老化时间？
直接给key设置过期时间（expire），过期后会自动删除缓存数据；
11、多线程的实现方式？线程池如何使用的，是否了解？
12、你是如何在springboot的yml中配置连接池的？你们公司使用的哪种连接池？
配置c3p0或者阿里的druid连接池；
13、构造函数是否可以被继承？
不可以被继承，java是单继承，可以实现多个接口；
14、什么是上溯造型与下溯造型？哪个是安全的？
指的是java的多态问题：上溯造型是安全的，它是父类；下塑造型是子类，类型kennel不
确定，要借助instanceof来确认，所以是不安全的；
15、Spring与spring之间如何通信的？
可以通过dubbo来实现
16、linux系统下终端查找进程的命令以及如何查看内存磁盘空间？
Ps-a查看进程df-k以kb为单位查看内存磁盘空间
17、什么是注册中心？
比如zookeep；
18、你是如何设计用户表和权限表之间的关联？
使用uuid（将id加密生成为3位的字符串）代替主键id自增；
19、什么是mysql存储过程，如何实现？
20、当消费者不消费消息时，如何解决，你是采用哪种措施？
可以采用事后补救，配置阿里容器监控mq的状态，一旦发现不工作了，就即使发邮件通知
运维来维修；或者花钱配置几个服务器，一个不工作了即使换另一个顶上来；或者在生产者
每次生产消息前，先去检查服务器worker的状态，如果停止工作就不忘mq中发送消息；
服务器恢复正常后在发送消息到mq；
21、springboot如何禁用某个依赖包(在gva中使用exclusion)？
可以使用exclusion单独禁用不需要的依赖包；
22、简述一下springseucity运行机制，你在实际开发中是如何使用的？介绍一下拦截器的
执行等级和匹配规则？jwt是如何实现认证策略的？
可以分为认证、鉴权两部分
23、高并发的一些应用场景，以及如何解决的？
24、如何解决hash冲突问题？（可回答采用拉链式）
25、springboot的配置文件优先级，有哪几种配置方式？
yml和properties两种配置文件，其中properties优先级高；如果同时存在，springboot会先
调用yml文件，然后再调用properties配置文件，这会导致后者将前者内容覆盖掉
26、mysql性能的优化方式？
sql优化，表结构优化，索引优化；硬盘优化；
27、swagger除了用来生成接口文档，还可以用来实现什么功能？
可以自动生成代码，在controlle和service，dao层对应的方法；
28、如何解决网络攻击问题，你们是如何实现网络防护的？
29、了解微服务吗，使用过微服务吗？
30、请简单介绍一下设计模式？
31、请简单介绍一下Spring框架？什么是ORM？
32、Springboot中需要重新部署web服务器吗？如何配置的？
不需要，它内部已经继承外部tomcat服务器

复试问题：
33、什么是乐观锁和悲观锁？使用场景？
乐观锁：
总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更
新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算
法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于
write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面
的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。
悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据
的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线
程使用，其它线程阻塞，用完后再把资源转让给其它线程），传统的关系型数据库里边就用
到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁
synchronized和ReentrantLock就是悲观锁的体现；
使用场景？
像乐观锁适用于写比较少的情况下（多读场景）；
一般多写的场景下用悲观锁就比较合适。
34、算法题：
给定S和T两个字符串，其中，#表示退格符，也就是向前删除一个字符。
判断S和T是否相同,谈谈你的解题思路？
思路如下：
1,遍历两个字符串，遇到非#，则加入一个队列，遇到#，则从队列尾部删除一个元素。
2,最后比较两个队列的元素是否相同
最后说一下队列的特点：先进先出
35、syncronyzi和类锁（Reentrnlock）的区别？
这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步；
区别：syncronyzi他是java的关键字，可以自动释放，synchronized既可以修饰方法，也可
以修饰代码块；
Reentrnlock需要自己手动释放，通过lock和unlock；
36、谈谈你了解的几个java关键字；
可以聊聊final、fianally、fianllize的区别
37、aop底层原理？你是如何实日志登陆的？有几种advice？
Java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用
InvokeHandler来处理。
而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其
字节码生成子类来处理。
1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP
2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP
3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和
CGLIB之间转换；
日志登陆：这个结合自己的项目来说，大体上可以看看老师写的代码；
38、什么是设计模式？你了解多少？autowire底层使用哪种设计模式？
可以说说单例模式，工厂模式，代理模式等；
39、redis加载热点数据的原因？什么时候开始启动？
避免出现意外情况（比如突然断电等）缓存数据丢失，加载热点数据受，下一次启动就可以
自动保存上次存储的信息，避免每次都从数据库重新读取，也可以减少服务器压力；
40、volatile关键字的作用？
被volatile修饰的变量保证对所有线程可见，另一个线程修改变量，被另一个线程感知；
41、什么是缓存穿透？缓存雪崩？缓存击穿？
缓存穿透：缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的
数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过
大。
缓存雪崩：许多缓存在同一时间失效，导致页面的卡顿；解决办法：缓存失效的时间设置的
随机点，避免同时失效发生；
缓存击穿：热点数据访问量过高，当Redis缓存失效（为什么缓存会失效，下面会分析）时
候，MySQL访问量过高导致的卡顿，宕机或者其他问题；解决方案是：热点数据缓存不设
置失效日期，或者失效时间很长
42、介绍一下hashmap的底层原理？什么是红黑树？
数组+链表，阀值大于8就会转为红黑树；
43、介绍一下orm框架，你了解哪几种？
mybatis是半自动ORM框架，需要我们手动去编写mysql;hibernate是全自动ORM框架，然
后可以稍微介绍一下它；
44、在java中wait和sleep方法的不同？
Sleep：
让当前线程休眠指定时间。
休眠时间的准确性依赖于系统时钟和CPU调度机制。
不释放已获取的锁资源，如果sleep方法在同步上下文中调用，那么其他线程是无法进入到
当前同步块或者同步方法中的。
可通过调用interrupt()方法来唤醒休眠线程。
Wait：
让当前线程进入等待状态，当别的其他线程调用notify()或者notifyAll()方法时，当前线程进
入就绪状态
wait方法必须在同步上下文中调用，例如：同步方法块或者同步方法中，这也就意味着如果
你想要调用wait方法，前提是必须获取对象上的锁资源
当wait方法调用时，当前线程将会释放已获取的对象锁资源，并进入等待队列，其他线程
就可以尝试获取对象上的锁资源。
45、#{}和${}的区别
#{}是预编译处理，实际上调用的是perstatement的set()方法；${}是直接写入变量，容易造
成sql注入，数据不安全；
46、几种线程池的区别？
newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收
空闲线程，若无可回收，则新建线程。
newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中
等待。
newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任
务，保证所有任务按照指定顺序(FIFO,LIFO,优先级)执行。
SingleThreadPool(intnum)创建一个单线程化的线程池，它只会用唯一的工作线程来执行任
务，保证所有任务按照指定顺序(FIFO,LIFO,优先级)执行。
newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。
newSingleThreadScheduledExecutor()创建一个指定线程后延迟后执行的线程任务。
47、什么是hash碰撞，如何解决hash冲突问题？
Hash碰撞冲突
我们知道，对象Hash的前提是实现equals()和hashCode()两个方法，那么HashCode()的作用
就是保证对象返回唯一hash值，但当两个对象计算值一样时，这就发生了碰撞冲突。如下
将介绍如何处理冲突，当然其前提是一致性hash。
开放地址法（再散列法）现在用的不多，再哈希法Rehash，
链地址法（拉链法）
将所有关键字为同义词的记录存储在同一线性链表中。如下：
将所有关键字为同义词的记录存储在同一线性链表中.基本思想:将所有哈希地址为i的元素
构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查
找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。对比
JDK1.7hashMap的存储结构是不是很好理解。至于1.8之后链表长度大于6rehash为树形结
构不在此处讨论。
优点：
①拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度
较短；②由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定
表长的情况；③开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费
很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此
节省空间；④在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链
表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结点的
空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放
地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在用开放地址法处理冲突
的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。
缺点：
指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针
空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提
高平均查找速度。
